// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum Role {
  USER
  ADMIN
}

enum AddressType {
  HOME
  WORK
  OTHER
}

enum RegistrationType {
  EMAIL
  GOOGLE
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

// User model for authentication and customer management
model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String?
  role      Role   @default(USER)
  phone     String?
  address   UserAddress[]
  userCoupons UserCoupon[]
  googleId  String?
  registrationType RegistrationType @default(EMAIL)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isVerified Boolean @default(false)
  // OTP fields for email verification
  otpCode     String?
  otpExpires  DateTime?
  
  // Password reset fields
  resetToken     String?
  resetExpires   DateTime?
  resetAttempts  Int      @default(0)
  lastResetAttempt DateTime?

  // NextAuth.js relations
  accounts Account[]
  sessions Session[]

  @@map("users")
  @@index([email])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model UserAddress {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  line1       String   
  line2       String?  
  landmark    String?  
  city        String   
  state       String   @default("Kerala")
  postalCode  String
  country     String   @default("India")
  latitude    Float?
  longitude   Float?
  addressType AddressType @default(HOME)
  isDefault   Boolean     @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("user_addresses")
  @@index([userId])
}

model Coupon {
  id          String   @id @default(cuid())
  code        String   @unique
  name        String
  description String?
  discountType DiscountType
  discountValue Float
  minOrderAmount Float?
  maxDiscountAmount Float?
  usageLimit  Int?
  usedCount   Int      @default(0)
  isActive    Boolean  @default(true)
  validFrom   DateTime
  validUntil  DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userCoupons UserCoupon[]

  @@map("coupons")
}

model UserCoupon {
  id        String   @id @default(cuid())
  userId    String
  couponId  String
  isUsed    Boolean  @default(false)
  usedAt    DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  coupon Coupon @relation(fields: [couponId], references: [id], onDelete: Cascade)

  @@unique([userId, couponId])
  @@map("user_coupons")
}